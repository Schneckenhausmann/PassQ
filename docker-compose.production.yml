# PassQ Password Manager Production Docker Compose Configuration
# This file demonstrates secure production deployment with Docker secrets

version: '3.8'

# Docker secrets for secure credential management
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  encryption_key:
    file: ./secrets/encryption_key.txt
  audit_secret:
    file: ./secrets/audit_secret.txt
  microsoft_client_secret:
    file: ./secrets/microsoft_client_secret.txt
  google_client_secret:
    file: ./secrets/google_client_secret.txt
  smtp_password:
    file: ./secrets/smtp_password.txt

# Isolated networks for security
networks:
  frontend_network:
    driver: bridge
    internal: false
  backend_network:
    driver: bridge
    internal: true
  database_network:
    driver: bridge
    internal: true

services:
  db:
    image: postgres:15.8-alpine
    secrets:
      - postgres_password
    environment:
      POSTGRES_USER: passq
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: passq
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - database_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U passq -d passq"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    user: "999:999"  # postgres user
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
  
  backend:
    build: ./backend
    secrets:
      - postgres_password
      - jwt_secret
      - encryption_key
      - audit_secret
      - microsoft_client_secret
      - google_client_secret
      - smtp_password
    ports:
      - "127.0.0.1:8080:8080"  # Bind to localhost only
    networks:
      - backend_network
      - database_network
    environment:
      # DATABASE CONFIGURATION
      DATABASE_URL_FILE: /run/secrets/postgres_password
      # Note: You'll need to modify your backend to read from secrets files
      # Alternative: Use init script to construct DATABASE_URL from secret
      
      # SECURITY KEYS (Read from secrets)
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
      AUDIT_SECRET_FILE: /run/secrets/audit_secret
      
      # OAUTH CONFIGURATION
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET_FILE: /run/secrets/microsoft_client_secret
      MICROSOFT_REDIRECT_URI: ${MICROSOFT_REDIRECT_URI}
      
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET_FILE: /run/secrets/google_client_secret
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      
      # SMTP CONFIGURATION (Production)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD_FILE: /run/secrets/smtp_password
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME:-PassQ Password Manager}
      
      # PRODUCTION SETTINGS
      RUST_LOG: ${RUST_LOG:-info}
      ENVIRONMENT: production
    depends_on:
      db:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "1001:1001"  # non-root user
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build: ./frontend
    ports:
      - "127.0.0.1:80:80"  # Bind to localhost only
    networks:
      - frontend_network
      - backend_network
    depends_on:
      - backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    user: "1001:1001"  # non-root user
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.25'
        reservations:
          memory: 32M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Reverse proxy for production (optional)
  nginx-proxy:
    image: nginx:1.27.2-alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - frontend_network
    depends_on:
      - frontend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.25'
    profiles:
      - proxy  # Only start with --profile proxy

volumes:
  pgdata:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/passq/data  # Adjust path for your system

# Usage:
# Development: docker-compose up
# Production: docker-compose -f docker-compose.production.yml up
# With proxy: docker-compose -f docker-compose.production.yml --profile proxy up